<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="11.138" tests="31" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\Koolb\OneDrive\Documents\Database Management\tanUrPeach_backend\backend\target\test-classes;C:\Users\Koolb\OneDrive\Documents\Database Management\tanUrPeach_backend\backend\target\classes;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.5.3\spring-boot-starter-data-jpa-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.3\spring-boot-starter-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.3\spring-boot-starter-logging-3.5.3.jar;C:\Users\Koolb\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\Koolb\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\Koolb\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Koolb\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Koolb\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\Koolb\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Koolb\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.5.3\spring-boot-starter-jdbc-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\zaxxer\HikariCP\6.3.0\HikariCP-6.3.0.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-jdbc\6.2.8\spring-jdbc-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\hibernate\orm\hibernate-core\6.6.18.Final\hibernate-core-6.6.18.Final.jar;C:\Users\Koolb\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Koolb\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Koolb\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\Koolb\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\Koolb\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\Koolb\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\Koolb\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\Koolb\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\Koolb\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Koolb\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Koolb\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Koolb\.m2\repository\org\springframework\data\spring-data-jpa\3.5.1\spring-data-jpa-3.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\data\spring-data-commons\3.5.1\spring-data-commons-3.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-orm\6.2.8\spring-orm-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-context\6.2.8\spring-context-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-tx\6.2.8\spring-tx-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-beans\6.2.8\spring-beans-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-aspects\6.2.8\spring-aspects-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.5.3\spring-boot-starter-web-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.5.3\spring-boot-starter-json-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.19.1\jackson-datatype-jdk8-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.19.1\jackson-datatype-jsr310-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.19.1\jackson-module-parameter-names-2.19.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.5.3\spring-boot-starter-tomcat-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.42\tomcat-embed-core-10.1.42.jar;C:\Users\Koolb\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.42\tomcat-embed-el-10.1.42.jar;C:\Users\Koolb\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.42\tomcat-embed-websocket-10.1.42.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-web\6.2.8\spring-web-6.2.8.jar;C:\Users\Koolb\.m2\repository\io\micrometer\micrometer-observation\1.15.1\micrometer-observation-1.15.1.jar;C:\Users\Koolb\.m2\repository\io\micrometer\micrometer-commons\1.15.1\micrometer-commons-1.15.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-webmvc\6.2.8\spring-webmvc-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-expression\6.2.8\spring-expression-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-devtools\3.5.3\spring-boot-devtools-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot\3.5.3\spring-boot-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.3\spring-boot-autoconfigure-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\mysql\mysql-connector-j\9.2.0\mysql-connector-j-9.2.0.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.5.3\spring-boot-starter-test-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-test\3.5.3\spring-boot-test-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.5.3\spring-boot-test-autoconfigure-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Koolb\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Koolb\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Koolb\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Koolb\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Koolb\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Koolb\.m2\repository\org\assertj\assertj-core\3.27.3\assertj-core-3.27.3.jar;C:\Users\Koolb\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Koolb\.m2\repository\org\hamcrest\hamcrest\3.0\hamcrest-3.0.jar;C:\Users\Koolb\.m2\repository\org\mockito\mockito-junit-jupiter\5.17.0\mockito-junit-jupiter-5.17.0.jar;C:\Users\Koolb\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Koolb\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-core\6.2.8\spring-core-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-jcl\6.2.8\spring-jcl-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-test\6.2.8\spring-test-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\xmlunit\xmlunit-core\2.10.2\xmlunit-core-2.10.2.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.5.3\spring-boot-starter-security-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-aop\6.2.8\spring-aop-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-config\6.5.1\spring-security-config-6.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-web\6.5.1\spring-security-web-6.5.1.jar;C:\Users\Koolb\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\Koolb\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\Koolb\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.19.1\jackson-databind-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.19.1\jackson-annotations-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.19.1\jackson-core-2.19.1.jar;C:\Users\Koolb\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Koolb\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\Koolb\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.0\junit-jupiter-5.10.0.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.12.2\junit-jupiter-api-5.12.2.jar;C:\Users\Koolb\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Koolb\.m2\repository\org\junit\platform\junit-platform-commons\1.12.2\junit-platform-commons-1.12.2.jar;C:\Users\Koolb\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.12.2\junit-jupiter-params-5.12.2.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.12.2\junit-jupiter-engine-5.12.2.jar;C:\Users\Koolb\.m2\repository\org\junit\platform\junit-platform-engine\1.12.2\junit-platform-engine-1.12.2.jar;C:\Users\Koolb\.m2\repository\org\mockito\mockito-core\5.11.0\mockito-core-5.11.0.jar;C:\Users\Koolb\.m2\repository\net\bytebuddy\byte-buddy\1.17.6\byte-buddy-1.17.6.jar;C:\Users\Koolb\.m2\repository\net\bytebuddy\byte-buddy-agent\1.17.6\byte-buddy-agent-1.17.6.jar;C:\Users\Koolb\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-test\6.5.1\spring-security-test-6.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-core\6.5.1\spring-security-core-6.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-crypto\6.5.1\spring-security-crypto-6.5.1.jar;C:\Users\Koolb\.m2\repository\com\h2database\h2\2.3.232\h2-2.3.232.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-17\bin"/>
    <property name="sun.java.command" value="C:\Users\Koolb\AppData\Local\Temp\surefire14083907088094384290\surefirebooter-20250923184253109_3.jar C:\Users\Koolb\AppData\Local\Temp\surefire14083907088094384290 2025-09-23T18-42-52_800-jvmRun1 surefire-20250923184253109_1tmp surefire_0-20250923184253109_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\Koolb\OneDrive\Documents\Database Management\tanUrPeach_backend\backend\target\test-classes;C:\Users\Koolb\OneDrive\Documents\Database Management\tanUrPeach_backend\backend\target\classes;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.5.3\spring-boot-starter-data-jpa-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.3\spring-boot-starter-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.3\spring-boot-starter-logging-3.5.3.jar;C:\Users\Koolb\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\Koolb\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\Koolb\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Koolb\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Koolb\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\Koolb\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Koolb\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.5.3\spring-boot-starter-jdbc-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\zaxxer\HikariCP\6.3.0\HikariCP-6.3.0.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-jdbc\6.2.8\spring-jdbc-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\hibernate\orm\hibernate-core\6.6.18.Final\hibernate-core-6.6.18.Final.jar;C:\Users\Koolb\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Koolb\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Koolb\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\Koolb\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\Koolb\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\Koolb\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\Koolb\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\Koolb\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\Koolb\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Koolb\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Koolb\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Koolb\.m2\repository\org\springframework\data\spring-data-jpa\3.5.1\spring-data-jpa-3.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\data\spring-data-commons\3.5.1\spring-data-commons-3.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-orm\6.2.8\spring-orm-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-context\6.2.8\spring-context-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-tx\6.2.8\spring-tx-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-beans\6.2.8\spring-beans-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-aspects\6.2.8\spring-aspects-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.5.3\spring-boot-starter-web-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.5.3\spring-boot-starter-json-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.19.1\jackson-datatype-jdk8-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.19.1\jackson-datatype-jsr310-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.19.1\jackson-module-parameter-names-2.19.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.5.3\spring-boot-starter-tomcat-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.42\tomcat-embed-core-10.1.42.jar;C:\Users\Koolb\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.42\tomcat-embed-el-10.1.42.jar;C:\Users\Koolb\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.42\tomcat-embed-websocket-10.1.42.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-web\6.2.8\spring-web-6.2.8.jar;C:\Users\Koolb\.m2\repository\io\micrometer\micrometer-observation\1.15.1\micrometer-observation-1.15.1.jar;C:\Users\Koolb\.m2\repository\io\micrometer\micrometer-commons\1.15.1\micrometer-commons-1.15.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-webmvc\6.2.8\spring-webmvc-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-expression\6.2.8\spring-expression-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-devtools\3.5.3\spring-boot-devtools-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot\3.5.3\spring-boot-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.3\spring-boot-autoconfigure-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\mysql\mysql-connector-j\9.2.0\mysql-connector-j-9.2.0.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.5.3\spring-boot-starter-test-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-test\3.5.3\spring-boot-test-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.5.3\spring-boot-test-autoconfigure-3.5.3.jar;C:\Users\Koolb\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Koolb\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Koolb\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Koolb\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Koolb\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Koolb\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Koolb\.m2\repository\org\assertj\assertj-core\3.27.3\assertj-core-3.27.3.jar;C:\Users\Koolb\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Koolb\.m2\repository\org\hamcrest\hamcrest\3.0\hamcrest-3.0.jar;C:\Users\Koolb\.m2\repository\org\mockito\mockito-junit-jupiter\5.17.0\mockito-junit-jupiter-5.17.0.jar;C:\Users\Koolb\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Koolb\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-core\6.2.8\spring-core-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-jcl\6.2.8\spring-jcl-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-test\6.2.8\spring-test-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\xmlunit\xmlunit-core\2.10.2\xmlunit-core-2.10.2.jar;C:\Users\Koolb\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.5.3\spring-boot-starter-security-3.5.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\spring-aop\6.2.8\spring-aop-6.2.8.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-config\6.5.1\spring-security-config-6.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-web\6.5.1\spring-security-web-6.5.1.jar;C:\Users\Koolb\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\Koolb\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\Koolb\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.19.1\jackson-databind-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.19.1\jackson-annotations-2.19.1.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.19.1\jackson-core-2.19.1.jar;C:\Users\Koolb\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Koolb\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\Koolb\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\Koolb\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.0\junit-jupiter-5.10.0.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.12.2\junit-jupiter-api-5.12.2.jar;C:\Users\Koolb\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Koolb\.m2\repository\org\junit\platform\junit-platform-commons\1.12.2\junit-platform-commons-1.12.2.jar;C:\Users\Koolb\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.12.2\junit-jupiter-params-5.12.2.jar;C:\Users\Koolb\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.12.2\junit-jupiter-engine-5.12.2.jar;C:\Users\Koolb\.m2\repository\org\junit\platform\junit-platform-engine\1.12.2\junit-platform-engine-1.12.2.jar;C:\Users\Koolb\.m2\repository\org\mockito\mockito-core\5.11.0\mockito-core-5.11.0.jar;C:\Users\Koolb\.m2\repository\net\bytebuddy\byte-buddy\1.17.6\byte-buddy-1.17.6.jar;C:\Users\Koolb\.m2\repository\net\bytebuddy\byte-buddy-agent\1.17.6\byte-buddy-agent-1.17.6.jar;C:\Users\Koolb\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-test\6.5.1\spring-security-test-6.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-core\6.5.1\spring-security-core-6.5.1.jar;C:\Users\Koolb\.m2\repository\org\springframework\security\spring-security-crypto\6.5.1\spring-security-crypto-6.5.1.jar;C:\Users\Koolb\.m2\repository\com\h2database\h2\2.3.232\h2-2.3.232.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Koolb"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-07-16"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-17"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\Koolb\OneDrive\Documents\Database Management\tanUrPeach_backend\backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="windows-1252"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\Koolb\AppData\Local\Temp\surefire14083907088094384290\surefirebooter-20250923184253109_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.12+8-LTS-286"/>
    <property name="user.name" value="Koolb"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\Koolb\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\Koolb\AppData\Local\Temp\"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="17.0.12"/>
    <property name="user.dir" value="C:\Users\Koolb\OneDrive\Documents\Database Management\tanUrPeach_backend\backend"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="27292"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="windows-1252"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-17\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Python311\Scripts\;C:\Python311\;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\java8path;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\ProgramData\chocolatey\bin;C:\Program Files\HP\HP One Agent;C:\Program Files\Wireshark;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\Apache\Maven\apache-maven-3.9.9\bin;C:\Program Files\Java\jdk-17\bin;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\texlive\2022\bin\win32;C:\Users\Koolb\AppData\Local\Microsoft\WindowsApps;C:\Users\Koolb\AppData\Local\Programs\MiKTeX\miktex\bin\x64\;C:\Users\Koolb\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Koolb\AppData\Local\GitHubDesktop\bin;C:\Users\Koolb\AppData\Roaming\npm;c:\Users\Koolb\AppData\Roaming\Code\User\globalStorage\github.copilot-chat\debugCommand;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.12+8-LTS-286"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="getAllAppointments_shouldReturnForbiddenForUser" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.656">
    <system-out><![CDATA[2025-09-23T18:43:10.734-04:00  INFO 27292 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest]: AppointmentControllerIntegrationTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-09-23T18:43:10.754-04:00  INFO 27292 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.tanyourpeach.backend.BackendApplication for test class com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest
Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="deleteAppointment_shouldSucceedForAdmin" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.612">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0 left join appointments a1_0 on a1_0.appointment_id=ash1_0.appointment_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="getUserAppointments_shouldReturnList" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.407">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldNotCreateReceipt_whenStatusNotConfirmed" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.703">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0 left join appointments a1_0 on a1_0.appointment_id=r1_0.appointment_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="getAllAppointments_shouldReturnForbiddenIfNoToken" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.358">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="getAppointmentById_shouldReturnNotFound" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.342">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldFail_whenMissingClientAddress" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.366">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldSucceedForAdmin" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.4">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldSucceedForOwner" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.382">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="createAppointment_shouldFailWithMissingAddress" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.412">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="updateNonExistentAppointment_shouldReturn404" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.402">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="getAllAppointments_shouldReturnForAdmin" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.337">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_toConfirmed_shouldCreateReceipt" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.424">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0 left join services s1_0 on s1_0.service_id=siu1_0.service_id where s1_0.service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0 left join services s1_0 on s1_0.service_id=siu1_0.service_id where s1_0.service_id=?
Hibernate: insert into financial_log (amount,description,reference_id,source,type) values (?,?,?,?,?)
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0 left join appointments a1_0 on a1_0.appointment_id=r1_0.appointment_id where a1_0.appointment_id=?
Hibernate: insert into receipts (appointment_id,date_issued,notes,payment_method,total_amount) values (?,?,?,?,?)
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0 left join appointments a1_0 on a1_0.appointment_id=r1_0.appointment_id where a1_0.appointment_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldReturnNotFoundForInvalidId" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.31">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: delete from receipts where receipt_id=?
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: delete from financial_log where log_id=?
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldReturn403_whenUnauthorizedUserTriesToUpdate" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.306">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="createAppointment_shouldFailWithMissingName" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.339">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="getUserAppointments_shouldReturnUnauthorizedWithoutToken" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.301">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="createAppointment_shouldSucceedWithValidData" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.391">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldReturnForbidden_whenNoAuth" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.24">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="confirmAppointment_shouldCreateReceiptAndFinancialLogAndDeductInventory" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.524">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: insert into inventory (name,last_updated,low_stock_threshold,notes,quantity,total_spent,unit_cost) values (?,?,?,?,?,?,?)
Hibernate: select siu1_0.item_id,siu1_0.service_id,i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost,siu1_0.quantity_used,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at from service_inventory_usage siu1_0 join inventory i1_0 on i1_0.item_id=siu1_0.item_id join services s1_0 on s1_0.service_id=siu1_0.service_id where (siu1_0.item_id,siu1_0.service_id) in ((?,?))
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0 where i1_0.item_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: insert into service_inventory_usage (quantity_used,item_id,service_id) values (?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0 left join services s1_0 on s1_0.service_id=siu1_0.service_id where s1_0.service_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0 where i1_0.item_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0 left join services s1_0 on s1_0.service_id=siu1_0.service_id where s1_0.service_id=?
Hibernate: update inventory set name=?,last_updated=?,low_stock_threshold=?,notes=?,quantity=?,total_spent=?,unit_cost=? where item_id=?
Hibernate: insert into financial_log (amount,description,reference_id,source,type) values (?,?,?,?,?)
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0 left join appointments a1_0 on a1_0.appointment_id=r1_0.appointment_id where a1_0.appointment_id=?
Hibernate: insert into receipts (appointment_id,date_issued,notes,payment_method,total_amount) values (?,?,?,?,?)
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0 left join appointments a1_0 on a1_0.appointment_id=r1_0.appointment_id where a1_0.appointment_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0 where i1_0.item_id=?
]]></system-out>
  </testcase>
  <testcase name="confirmAppointment_shouldFail_whenInventoryInsufficient" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.364">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: delete from receipts where receipt_id=?
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: delete from financial_log where log_id=?
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0 where i1_0.item_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from service_inventory_usage where item_id=? and service_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: delete from inventory where item_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: insert into inventory (name,last_updated,low_stock_threshold,notes,quantity,total_spent,unit_cost) values (?,?,?,?,?,?,?)
Hibernate: select siu1_0.item_id,siu1_0.service_id,i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost,siu1_0.quantity_used,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at from service_inventory_usage siu1_0 join inventory i1_0 on i1_0.item_id=siu1_0.item_id join services s1_0 on s1_0.service_id=siu1_0.service_id where (siu1_0.item_id,siu1_0.service_id) in ((?,?))
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0 where i1_0.item_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: insert into service_inventory_usage (quantity_used,item_id,service_id) values (?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0 left join services s1_0 on s1_0.service_id=siu1_0.service_id where s1_0.service_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0 where i1_0.item_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0 left join appointments a1_0 on a1_0.appointment_id=r1_0.appointment_id where a1_0.appointment_id=?
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
]]></system-out>
  </testcase>
  <testcase name="getAppointmentById_shouldReturnForbiddenForOtherUser" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.257">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0 where i1_0.item_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from service_inventory_usage where item_id=? and service_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: delete from inventory where item_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="createAppointment_shouldFail_whenMissingServiceOrAvailability" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.217">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldFailForNonOwner" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.264">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldReturn400_whenUpdateFails" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.248">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldFail_whenMissingClientName" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.235">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
]]></system-out>
  </testcase>
  <testcase name="getAppointmentById_shouldReturnForAdmin" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.221">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="getAppointmentById_shouldReturnForOwner" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.232">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="deleteAppointment_shouldReturnNotFoundForInvalidId" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.208">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
]]></system-out>
  </testcase>
  <testcase name="updateAppointment_shouldCreateStatusHistoryEntry_whenStatusChanges" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.366">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
]]></system-out>
  </testcase>
  <testcase name="deleteAppointment_shouldReturnForbiddenForUser" classname="com.tanyourpeach.backend.controller.AppointmentControllerIntegrationTest" time="0.232">
    <system-out><![CDATA[Hibernate: select ash1_0.status_history_id,ash1_0.appointment_id,ash1_0.changed_at,ash1_0.changed_by_email,ash1_0.changed_by_user_id,ash1_0.status from appointment_status_history ash1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.user_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: delete from appointment_status_history where status_history_id=?
Hibernate: select r1_0.receipt_id,r1_0.appointment_id,r1_0.date_issued,r1_0.notes,r1_0.payment_method,r1_0.total_amount from receipts r1_0
Hibernate: select fl1_0.log_id,fl1_0.amount,fl1_0.description,fl1_0.log_date,fl1_0.reference_id,fl1_0.source,fl1_0.type from financial_log fl1_0
Hibernate: select siu1_0.item_id,siu1_0.service_id,siu1_0.quantity_used from service_inventory_usage siu1_0
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,a1_0.status,a1_0.total_price,a1_0.travel_fee,a1_0.user_id from appointments a1_0
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0 where ts1_0.service_id=?
Hibernate: delete from appointments where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0
Hibernate: delete from availabilities where slot_id=?
Hibernate: select i1_0.item_id,i1_0.name,i1_0.last_updated,i1_0.low_stock_threshold,i1_0.notes,i1_0.quantity,i1_0.total_spent,i1_0.unit_cost from inventory i1_0
Hibernate: select ts1_0.service_id,ts1_0.base_price,ts1_0.created_at,ts1_0.description,ts1_0.duration_minutes,ts1_0.is_active,ts1_0.name,ts1_0.updated_at from services ts1_0
Hibernate: delete from services where service_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0
Hibernate: delete from users where user_id=?
Hibernate: delete from users where user_id=?
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into users (address,created_at,email,is_admin,name,password_hash) values (?,?,?,?,?,?)
Hibernate: insert into services (base_price,created_at,description,duration_minutes,is_active,name,updated_at) values (?,?,?,?,?,?,?)
Hibernate: insert into availabilities (created_at,date,end_time,is_booked,notes,start_time) values (?,?,?,?,?,?)
Hibernate: insert into appointments (appointment_date,availability_slot_id,base_price,client_address,client_email,client_name,created_at,distance_miles,notes,service_id,status,total_price,travel_fee,user_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
Hibernate: insert into appointment_status_history (appointment_id,changed_at,changed_by_email,changed_by_user_id,status) values (?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.appointment_date,a1_0.availability_slot_id,a2_0.slot_id,a2_0.created_at,a2_0.date,a2_0.end_time,a2_0.is_booked,a2_0.notes,a2_0.start_time,a1_0.base_price,a1_0.client_address,a1_0.client_email,a1_0.client_name,a1_0.created_at,a1_0.distance_miles,a1_0.notes,a1_0.service_id,s1_0.service_id,s1_0.base_price,s1_0.created_at,s1_0.description,s1_0.duration_minutes,s1_0.is_active,s1_0.name,s1_0.updated_at,a1_0.status,a1_0.total_price,a1_0.travel_fee,u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from appointments a1_0 join availabilities a2_0 on a2_0.slot_id=a1_0.availability_slot_id join services s1_0 on s1_0.service_id=a1_0.service_id left join users u1_0 on u1_0.user_id=a1_0.user_id where a1_0.appointment_id=?
Hibernate: update appointments set appointment_date=?,availability_slot_id=?,base_price=?,client_address=?,client_email=?,client_name=?,created_at=?,distance_miles=?,notes=?,service_id=?,status=?,total_price=?,travel_fee=?,user_id=? where appointment_id=?
Hibernate: select a1_0.slot_id,a1_0.created_at,a1_0.date,a1_0.end_time,a1_0.is_booked,a1_0.notes,a1_0.start_time from availabilities a1_0 where a1_0.slot_id=?
Hibernate: update availabilities set created_at=?,date=?,end_time=?,is_booked=?,notes=?,start_time=? where slot_id=?
Hibernate: select u1_0.user_id,u1_0.address,u1_0.created_at,u1_0.email,u1_0.is_admin,u1_0.name,u1_0.password_hash from users u1_0 where u1_0.email=?
]]></system-out>
  </testcase>
</testsuite>